def test_home_page_can_save_a_post_request(self):
	request = HttpRequest()
	request.method = 'POST'
	request.POST['item_text] = "A new list item'"
	
	response = home_page(request)
	
	self.assertIn('A new list item', response.content.decode()

def home_page(request):
	if request.method == 'POST':
		return HttpResponse(request.POST['item_text']) #item_text is the name of the input
	return render(request, 'home.html')





def home_page(request)P
	if request.method == 'POST':
		Item.objects.create(text=request.POST['item_text'])
		return redirect('/')
	items = Item.objects.all()
	return render(request, 'home.html', {'items':items})
	
The request that is processed by list.html passes "item_text" to the homepage view.
The home page view creates an object with the value associated with the key 'item_text' (the name of the input)
The home_page view redirects to home
The home page view also returns a response taht hs the request, the home.html templte and a dictionary of ALL the items in the item model. 
This is how you can run item for items.  Items= Item.objects.all()
	
	<form method="POST" action="/lists/new">	
			<input name="item_text" id="id_new_item" placeholder="Enter a to-do item">
			{% csrf_token %}
		</form>
		<table id="id_list_table">
			{% for item in items %}
				<tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>
			{% endfor %}
		</table>
		
		.
+-- db.sqlite3
+-- functional_tests
¦ +-- __init__.py
¦ +-- tests.py
+-- lists
¦ +-- admin.py
¦ +-- __init__.py
¦ +-- migrations
¦ ¦ +-- 0001_initial.py
¦ ¦ +-- 0002_item_text.py
¦ ¦ +-- __init__.py
¦ ¦ +-- __pycache__
¦ +-- models.py
¦ +-- __pycache__
¦ +-- templates
¦ ¦ +-- home.html
¦ +-- tests.py
¦ +-- views.py
+-- manage.py
+-- superlists
+-- __init__.py
+-- __pycache__
+-- settings.py
+-- urls.py
+-- wsgi.py
functional_tests.py is

urlpatterns = [
	url(r'^$', views.home_page, name="home"),
	url(r'^lists/new$', 'lists.views.new_list', name='new_list'),
	url(r'^lists/(\d+)/$', 'lists.views.view_list', name='view_list'),
	url(r'^lists/(\d+)/add_item$', 'lists.views.add_item', name='add_item'),
	#url(r'^admin/', include(admin.site.urls)),
]

self.client.post('lists/%d/add_item' % (correct_list.id,),data={'item_text': 'A new item for an existing list'}